"TravelBooking_PaymentModule/src/main/java/com/booking/BookingApplication.java"
package com.booking;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.cloud.openfeign.EnableFeignClients;

@SpringBootApplication
@EnableDiscoveryClient
@EnableFeignClients(basePackages = "com.booking.client")
public class BookingApplication {
    public static void main(String[] args) {
        SpringApplication.run(BookingApplication.class, args);
    }
}

"TravelBooking_PaymentModule/src/main/java/com/booking/client/TravelInsuranceClient.java"
package com.booking.client;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;

import java.util.List;
 
@FeignClient(name = "TravelInsuranceService")
public interface TravelInsuranceClient {
 
	@GetMapping("/api/insurance/price/{userId}")
    double getInsurancePriceByUserId(@PathVariable("userId") Long userId);
 
    @PutMapping("/api/insurance/{insuranceId}/booking/{bookingId}")
    String updateInsuranceBookingId(@PathVariable("insuranceId") Long insuranceId, @PathVariable("bookingId") Long bookingId);
}


"TravelBooking_PaymentModule/src/main/java/com/booking/client/TravelPackageClient.java"
package com.booking.client;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import com.booking.dto.TravelPackageDTO;

import java.util.List;
 
@FeignClient(name = "travel-package-management")
public interface TravelPackageClient {
 
    @GetMapping("/api/packages/internal/all")
    List<TravelPackageDTO> getAllPackages();

    @GetMapping("/api/packages/internal/{id}")
    TravelPackageDTO getPackageById(@PathVariable("id") Long id);
}

"TravelBooking_PaymentModule/src/main/java/com/booking/client/UserClient.java"
package com.booking.client;
 
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
 
import com.booking.dto.UserDTO;
 
@FeignClient(name = "usermanagement-service")
public interface UserClient {
 
    @GetMapping("/api/users/internal/customer/{id}")
    UserDTO getCustomerById(@PathVariable("id") Long userId);
 
	//UserDTO getCustomerById(Long userId);

}


"TravelBooking_PaymentModule/src/main/java/com/booking/controller/BookingController.java"
package com.booking.controller;
 
import com.booking.dto.BookingDTO;
import com.booking.entity.Booking;
import com.booking.service.BookingService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
 
import java.util.List;
import java.util.logging.Logger;
 
@RestController
@RequestMapping("/api/bookings")
public class BookingController {
 
    private final BookingService service;
    private static final Logger logger = Logger.getLogger(BookingController.class.getName());
 
    @Autowired
    public BookingController(BookingService service) {
        this.service = service;
    }
 
    @PostMapping
    public ResponseEntity<BookingDTO> createBooking(@RequestBody Booking booking) {
        try {
            BookingDTO bookingDTO = service.createBooking(booking);
            return new ResponseEntity<>(bookingDTO, HttpStatus.CREATED);
        } catch (RuntimeException ex) {
            logger.severe("Error creating booking: " + ex.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);
        }
    }
 
    @GetMapping
    public ResponseEntity<List<Booking>> getAllBookings() {
        List<Booking> bookings = service.getAllBookings();
        return ResponseEntity.ok(bookings);
    }
 
    @GetMapping("/{id}")
    public ResponseEntity<Booking> getBookingById(@PathVariable Long id) {
        Booking booking = service.getBookingById(id);
        if (booking == null) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok(booking);
    }
    
 
    @PutMapping("/cancel/{id}")
    public ResponseEntity<String> cancelBooking(@PathVariable Long id) {
        return service.cancelBooking(id);
    }
 
    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) {
        service.deleteBooking(id);
    }
    

    // User Module to get bookings by User ID
    @GetMapping("/internal/bookings/user/{userId}")
    public ResponseEntity<List<Booking>> getBookingsByUserId(@PathVariable Long userId) {
    	List<Booking> bookings = service.getBookingsByUserId(userId);
    	if (bookings.isEmpty()) {
    		return ResponseEntity.notFound().build();
    		}
    	return ResponseEntity.ok(bookings);
    	}

    
    //  Reviews and rating to validate booking
    @GetMapping("/user/{userId}/package/{packageId}/completed")
    public boolean hasUserCompletedPackage(@PathVariable Long userId, @PathVariable String packageId) {
        return service.hasUserCompletedPackage(userId, packageId);
    }
    
    // Insurance module to get Booking ID
    @GetMapping("/internal/{id}")
    public ResponseEntity<Booking> getInternalBookingById(@PathVariable Long id) {
        Booking booking = service.getBookingById(id);
        if (booking == null) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok(booking);
    }
}

"TravelBooking_PaymentModule/src/main/java/com/booking/controller/PaymentController.java"
package com.booking.controller;

import com.booking.dto.PaymentResponseDTO;
import com.booking.entity.Payment;
import com.booking.service.PaymentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.Collections;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/payments")
public class PaymentController {

    @Autowired private PaymentService paymentService;

    // Process payment with optional coupon code
    @PostMapping
    public PaymentResponseDTO process(
            @RequestBody Payment payment,
            @RequestParam(required = false) String couponCode) {
 
        Payment savedPayment = paymentService.processPayment(payment, couponCode);
 
        PaymentResponseDTO response = new PaymentResponseDTO();
        response.setPaymentId(savedPayment.getPaymentId());
        response.setUserId(savedPayment.getUserId());
        response.setBookingId(savedPayment.getBookingId());
        response.setAmount(savedPayment.getAmount());
        response.setStatus(savedPayment.getStatus());
        response.setPaymentMethod(savedPayment.getPaymentMethod());
        response.setCurrency(savedPayment.getCurrency());
 
        return response;
    }
    
 // Show total payable before actual payment
    @GetMapping("/expected-total")
    public Map<String, Double> getExpectedTotal(
            @RequestParam Long bookingId,
            @RequestParam(required = false) String couponCode) {
     
        double total = paymentService.calculateExpectedTotal(bookingId, couponCode);
        return Collections.singletonMap("totalPayable", total);
    }
    
    @GetMapping public List<Payment> getAll() { return paymentService.getAllPayments(); }
    
    @GetMapping("/{id}") public Payment getById(@PathVariable Long id) { return paymentService.getPaymentById(id); }
}

"TravelBooking_PaymentModule/src/main/java/com/example/dto/BookingDTO.java"
package com.booking.dto;

import lombok.Data;
import java.time.LocalDate;

@Data
public class BookingDTO {
    private Long bookingId;
    private Long userId;
    private Long packageId;
    private LocalDate tripStartDate;
    private LocalDate tripEndDate;
    private String status;
    private Long paymentId;
}

"TravelBooking_PaymentModule/src/main/java/com/example/dto/CoveragePlanDTO.java"
package com.booking.dto;
 
import lombok.AllArgsConstructor;
import lombok.Data;
 
/**
 * DTO to expose insurance coverage plans to Booking module.
 */
@Data
@AllArgsConstructor
public class CoveragePlanDTO {
    private String coverageType;       // BASIC, STANDARD, PREMIUM
    private String coverageDetails;    // Human-readable description
    private Double price;              // Fixed price per plan
    private Double claimableAmount;    // Max claim amount per plan
}

"TravelBooking_PaymentModule/src/main/java/com/example/dto/FlightDTO.java"
package com.booking.dto;

import lombok.Data;

@Data
public class FlightDTO {
	private String airline;
	private String fromCity;
	private String toCity;
	private String departureTime;
	private String arrivalTime;

}

"TravelBooking_PaymentModule/src/main/java/com/example/dto/HotelDTO.java"
package com.booking.dto;

import lombok.Data;

@Data
public class HotelDTO {
	private String name;
	private String city;
	private double rating;
	private int nights;
	private double costPerNight;

}

"TravelBooking_PaymentModule/src/main/java/com/example/dto/InsuranceDTO.java"
package com.booking.dto;

import lombok.Data;
 
/**
 * DTO to expose insurance coverage plans to Booking module.
 */
@Data
public class InsuranceDTO {
   
    private Long insuranceId;

    private Long userId;
 
    private Long bookingId;  // To be updated after successful payment
 
    private String coverageDetails;
 
    private String coverageType;
 
    private double price;
 
    private String provider;
 
    private String status;  // e.g., "PENDING", "ACTIVE", "CANCELLED"
}
 
"TravelBooking_PaymentModule/src/main/java/com/example/dto/itineraryDTO.java"
package com.booking.dto;

import lombok.Data;

@Data
public class ItineraryDTO {
	private int dayNumber;
	private String activityTitle;
	private String activityDescription;

}

"TravelBooking_PaymentModule/src/main/java/com/example/dto/OfferDTO.java"
package com.booking.dto;

import lombok.Data;

@Data
public class OfferDTO {
	private String couponCode;
	private String description;
	private int discountPercentage;
	private boolean active;

}

"TravelBooking_PaymentModule/src/main/java/com/example/dto/PackageDTO.java"
package com.booking.dto;

import lombok.Data;

import java.time.LocalDate;
@Data
public class PackageDTO {
	private Long packageId;
	//private Long agentId;
	private String title;
	private String description;
	private int duration;
	private double price;
	private int maxCapacity;
	private LocalDate tripStartDate;
	private LocalDate tripEndDate;

}

"TravelBooking_PaymentModule/src/main/java/com/example/dto/PaymentResponseDTO.java"

package com.booking.dto;

public class PaymentResponseDTO {
    private Long paymentId;
    private Long userId;
    private Long bookingId;
    private double amount;
    private String status;
    private String paymentMethod;
    private String currency;

    // Getters and Setters
    public Long getPaymentId() {
        return paymentId;
    }

    public void setPaymentId(Long paymentId) {
        this.paymentId = paymentId;
    }

    public Long getUserId() {
        return userId;
    }

    public void setUserId(Long userId) {
        this.userId = userId;
    }

    public Long getBookingId() {
        return bookingId;
    }

    public void setBookingId(Long bookingId) {
        this.bookingId = bookingId;
    }

    public double getAmount() {
        return amount;
    }

    public void setAmount(double amount) {
        this.amount = amount;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public String getPaymentMethod() {
        return paymentMethod;
    }

    public void setPaymentMethod(String paymentMethod) {
        this.paymentMethod = paymentMethod;
    }

    public String getCurrency() {
        return currency;
    }

    public void setCurrency(String currency) {
        this.currency = currency;
    }
}

"TravelBooking_PaymentModule/src/main/java/com/example/dto/SightseeingDTO.java"

package com.booking.dto;

import lombok.Data;

@Data
public class SightseeingDTO {

	private String location;
	private String description;
}

"TravelBooking_PaymentModule/src/main/java/com/example/dto/TravelPackageDTO.java"
package com.booking.dto;

import java.time.LocalDate;
import java.util.List;

import lombok.Data;

@Data
public class TravelPackageDTO {
	private Long packageId;
	private Long agentId;
	private String title;
	private String description;
	private int duration;
	private double price;
	private int maxCapacity;
	private LocalDate tripStartDate;
	private LocalDate tripEndDate;
	private List<String> highlights;
	private List<FlightDTO> flights;
	private List<HotelDTO> hotels;
	private List<SightseeingDTO> sightseeing;
	private List<ItineraryDTO> itinerary;
	private OfferDTO offer;

}

"TravelBooking_PaymentModule/src/main/java/com/example/dto/UserDTO.java"
package com.booking.dto;

import lombok.Data;


@Data
public class UserDTO {
	
	private Long id;
	private String name;
	private String email;
	private String role;

}


TravelBooking_PaymentModule/src/main/java/com/booking/entity/Booking.java"
package com.booking.entity;

import java.time.LocalDate;
import jakarta.persistence.*;
 
@Entity
public class Booking {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long bookingId;
    private Long userId;
    private Long packageId;


    @Column(name= "trip_start_date")
    private LocalDate tripStartDate;
    @Column(name= "trip_end_date")
    private LocalDate tripEndDate;


    private String status;
    private Long paymentId;
 
    // Getters and Setters
    public Long getBookingId() {
        return bookingId;
    }
 
    public void setBookingId(Long bookingId) {
        this.bookingId = bookingId;
    }
 
    public Long getUserId() {
        return userId;
    }
 
    public void setUserId(Long userId) {
        this.userId = userId;
    }
 
    public Long getPackageId() {
        return packageId;
    }
 
    public void setPackageId(Long packageId) {
        this.packageId = packageId;
    }
	public LocalDate getTripStartDate() {
		return tripStartDate;
	}
 
	public void setTripStartDate(LocalDate tripStartDate) {
		this.tripStartDate = tripStartDate;
	}
 
	public LocalDate getTripEndDate() {
		return tripEndDate;
	}
 
	public void setTripEndDate(LocalDate tripEndDate) {
		this.tripEndDate = tripEndDate;
	}

    public String getStatus() {
        return status;
    }
 
    public void setStatus(String status) {
        this.status = status;
    }
 
	public Long getPaymentId() {
		return paymentId;
	}
 
	public void setPaymentId(Long paymentId) {
		this.paymentId = paymentId;
	}
 
}


TravelBooking_PaymentModule/src/main/java/com/booking/entity/Payment.java"
package com.booking.entity;

import jakarta.persistence.*;

@Entity
public class Payment {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long paymentId;
	private Long userId;
    private Long bookingId;
    private double amount;
    private String status;
    
    @Column(nullable = false)
    private String paymentMethod; // Should be "Credit Card" or "Debit Card"
 
    private String currency;
 
    @Transient
    private String cardNumber;  // Not stored in DB
 
    @Transient
    private String cvv;			// Not stored in DB
 
    @Transient
    private String atmPin;		// Not stored in DB
    
    @Transient
    private String expiryDate;	// Not stored in DB
    
    // Getters and Setters
    
	public Long getUserId() {
		return userId;
	}
	public void setUserId(Long userId) {
		this.userId = userId;
	}
	public Long getBookingId() {
		return bookingId;
	}
	public void setBookingId(Long bookingId) {
		this.bookingId = bookingId;
	}
	public double getAmount() {
		return amount;
	}
	public void setAmount(double amount) {
		this.amount = amount;
	}
	public String getStatus() {
		return status;
	}
	public void setStatus(String status) {
		this.status = status;
	}
	public String getPaymentMethod() {
		return paymentMethod;
	}
	public void setPaymentMethod(String paymentMethod) {
		this.paymentMethod = paymentMethod;
	}
	public String getCurrency() {
		return currency;
	}
	public void setCurrency(String currency) {
		this.currency = currency;
	}
	public String getCardNumber() {
		return cardNumber;
	}
	public void setCardNumber(String cardNumber) {
		this.cardNumber = cardNumber;
	}
	public String getCvv() {
		return cvv;
	}
	public void setCvv(String cvv) {
		this.cvv = cvv;
	}
	public String getAtmPin() {
		return atmPin;
	}
	public void setAtmPin(String atmPin) {
		this.atmPin = atmPin;
	}
	public Long getPaymentId() {
		return paymentId;
	}
	public void setPaymentId(Long paymentId) {
		this.paymentId = paymentId;
	}
	public String getExpiryDate() {
		return expiryDate;
	}
	public void setExpiryDate(String expiryDate) {
		this.expiryDate = expiryDate;
	}
}

"TravelBooking_PaymentModule/src/main/java/com/booking/repository/BookingRepository.java"

package com.booking.repository;
 
import com.booking.entity.Booking;

import org.springframework.data.jpa.repository.JpaRepository;
 
import java.util.List;
 
public interface BookingRepository extends JpaRepository<Booking, Long> {
	List<Booking> findByUserId(Long userId);
	int countByUserId(Long userId);
	List<Booking> findByPackageId(Long packageId);
}
 


"TravelBooking_PaymentModule/src/main/java/com/booking/repository/PaymentRepository.java"
package com.booking.repository;
 
import com.booking.entity.Payment;
import org.springframework.data.jpa.repository.JpaRepository;
 
public interface PaymentRepository extends JpaRepository<Payment, Long> {

}

"TravelBooking_PaymentModule/src/main/java/com/example/response/ApiResponse.java"
package com.booking.response;
 
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
 
@Data
@AllArgsConstructor
@NoArgsConstructor
public class ApiResponse {
    private boolean success;
    private String message;
    private Object data;
}

"TravelBooking_PaymentModule/src/main/java/com/booking/service/BookingService.java"
package com.booking.service;

import com.booking.client.TravelPackageClient;
import com.booking.client.UserClient;
import com.booking.dto.BookingDTO;
import com.booking.dto.TravelPackageDTO;
import com.booking.dto.UserDTO;
import com.booking.entity.Booking;
import com.booking.repository.BookingRepository;
//import com.booking.response.ApiResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import java.time.LocalDate;
import java.util.List;
import java.util.logging.Logger;

@Service
public class BookingService {
    @Autowired
    private BookingRepository bookingRepo;
    @Autowired
    private TravelPackageClient travelPackageClient;
    @Autowired
    private UserClient userClient;
    private static final Logger logger = Logger.getLogger(BookingService.class.getName());
    public BookingDTO createBooking(Booking bookingRequest) {
        Long userId = bookingRequest.getUserId();
        Long packageId = bookingRequest.getPackageId();
logger.info("Creating booking for userId: " + userId + " and packageId: " + packageId);
        // Validate User
        UserDTO user = userClient.getCustomerById(userId);
        if (user == null || !"CUSTOMER".equalsIgnoreCase(user.getRole())) {
            throw new RuntimeException("User is not a valid CUSTOMER.");
        }
        // Validate Package
        TravelPackageDTO travelPackage = travelPackageClient.getPackageById(packageId);
        if (travelPackage == null) {
            throw new IllegalArgumentException("Invalid travel package ID.");
        }
 
        // Create and save booking
        Booking booking = new Booking();
        booking.setUserId(userId);
        booking.setPackageId(packageId);
        booking.setTripStartDate(travelPackage.getTripStartDate());
        booking.setTripEndDate(travelPackage.getTripEndDate());
        booking.setStatus("CONFIRMED");
        Booking savedBooking = bookingRepo.save(booking);
        // Build response DTO
        BookingDTO dto = new BookingDTO();
        dto.setBookingId(savedBooking.getBookingId());
        dto.setUserId(userId);
        dto.setPackageId(packageId);
        dto.setTripStartDate(savedBooking.getTripStartDate());
        dto.setTripEndDate(savedBooking.getTripEndDate());
        dto.setStatus(savedBooking.getStatus());
        dto.setPaymentId(savedBooking.getPaymentId());
logger.info("Booking created successfully with bookingId: " + savedBooking.getBookingId());
        return dto;
    }
    public List<Booking> getAllBookings() {
        return bookingRepo.findAll();
    }
    
    public Booking getBookingById(Long id) {
        return bookingRepo.findById(id).orElse(null);
    }
    
    public Booking getInternalBookingById(Long id) {
        return bookingRepo.findById(id).orElse(null);
    }
    
    public void deleteBooking(Long id) {
        bookingRepo.deleteById(id);
    }
    
    public ResponseEntity<String> cancelBooking(Long bookingId) {
        Booking booking = bookingRepo.findById(bookingId).orElse(null);
        if (booking == null) {
            return ResponseEntity.badRequest().body("Booking not found.");
        }
        LocalDate today = LocalDate.now();
        if (booking.getTripStartDate().minusDays(7).isBefore(today)) {
            return ResponseEntity.badRequest().body("Cancellation not allowed. Must cancel at least 7 days before departure.");
        }
        booking.setStatus("CANCELLED");
        bookingRepo.save(booking);
        return ResponseEntity.ok("Booking cancelled successfully.");
    }
    
    
    // User module to return Bookings by UserId
    public List<Booking> getBookingsByUserId(Long userId) {
    	return bookingRepo.findByUserId(userId);
    }
 
    // Rating and reviews module to validate booking
    public boolean hasUserCompletedPackage(Long userId, String packageId) {
        List<Booking> bookings = bookingRepo.findByUserId(userId);
        LocalDate today = LocalDate.now();
        return bookings.stream()
            .anyMatch(b ->
                String.valueOf(b.getPackageId()).equals(packageId) &&
                "CONFIRMED".equalsIgnoreCase(b.getStatus()) &&
                !b.getTripEndDate().isAfter(today) // includes today
            );
    }

}


"TravelBooking_PaymentModule/src/main/java/com/booking/service/NotificationService.java"
package com.booking.service;

import com.booking.entity.Booking;
import com.booking.entity.Payment;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;

@Service
public class NotificationService {

    @Autowired
    private JavaMailSender mailSender;
    private final String senderEmail = "indhaanman@gmail.com";
    private final String customerEmail = "snehithkumar535@gmail.com";
    private final String agentEmail = "padmajareddy630@gmail.com";

    //Booking details are sent to customers through Email
    public void notifyCustomer(Booking booking, Payment payment) {
        String subject = "Your Travel Booking is Confirmed – Booking ID: " + booking.getBookingId();
        String body = "Dear Customer,\n\n"
                + "Thank you for booking your travel with us!\n\n"
                + "Your booking has been successfully confirmed. Here are the details:\n\n"
                + "- Booking ID: " + booking.getBookingId() + "\n"
                + "- Package ID: " + booking.getPackageId() + "\n"
                + "- Travel Dates: " + booking.getTripStartDate() + " to " + booking.getTripEndDate() + "\n"
                + "- Payment Amount: " + payment.getAmount() + " "+ payment.getCurrency() + "\n"
                + "- Payment Status: " + payment.getStatus() + "\n\n"
                + "We look forward to providing you with a wonderful travel experience.\n\n"
                + "Warm regards,\nTravel Booking Team";

        sendEmail(customerEmail, subject, body);
        System.out.println("Email is sent to " + customerEmail);
    }

    //Booking details are sent to travel agent through Email
    public void notifyTravelAgent(Booking booking, Payment payment) {
        String subject = "New Booking Received – Booking ID: " + booking.getBookingId();
        String body = "Dear Travel Agent,\n\n"
                + "A new booking has been successfully made. Please find the details below:\n\n"
                + "- Booking ID: " + booking.getBookingId() + "\n"
                + "- Customer ID: " + booking.getUserId() + "\n"
                + "- Package ID: " + booking.getPackageId() + "\n"
                + "- Travel Dates: " + booking.getTripStartDate() + " to " + booking.getTripEndDate() + "\n"
                + "- Payment Amount: " + payment.getAmount() + " " + payment.getCurrency() + "\n"
                + "- Payment Status: " + payment.getStatus() + "\n\n"
                + "Please ensure all arrangements are in place for the customer's travel.\n\n"
                + "Best regards,\nTravel Booking System";

        sendEmail(agentEmail, subject, body);
        System.out.println("Email is sent to " + agentEmail);
    }

    private void sendEmail(String to, String subject, String body) {
        SimpleMailMessage mail = new SimpleMailMessage();
        mail.setFrom(senderEmail);
        mail.setTo(to);
        mail.setSubject(subject);
        mail.setText(body);
        mailSender.send(mail);
    }
}


"TravelBooking_PaymentModule/src/main/java/com/booking/service/PaymentService.java"
package com.booking.service;
 
import com.booking.client.TravelPackageClient;
import com.booking.client.TravelInsuranceClient;
import com.booking.dto.OfferDTO;
import com.booking.dto.TravelPackageDTO;
import com.booking.entity.Booking;
import com.booking.entity.Payment;
import com.booking.repository.BookingRepository;
import com.booking.repository.PaymentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
 
import java.time.LocalDate;
import java.util.List;
 
@Service
public class PaymentService {
 
    @Autowired
    private PaymentRepository paymentRepo;
 
    @Autowired
    private BookingRepository bookingRepo;
 
    @Autowired
    private NotificationService notificationService;
 
    @Autowired
    private TravelPackageClient travelPackageClient;
 
    @Autowired
    private TravelInsuranceClient travelInsuranceClient;
 
    public Payment processPayment(Payment payment, String couponCodeApplied) {
        
        Long bookingId = payment.getBookingId();
        Booking booking = bookingRepo.findById(bookingId).orElse(null);
        if (booking == null) {
            throw new IllegalArgumentException("Booking with ID " + bookingId + " not found.");
        }
 
        // Fetch package details
        TravelPackageDTO pkg = travelPackageClient.getPackageById(booking.getPackageId());
        if (pkg == null) {
            throw new IllegalArgumentException("Invalid package ID associated with booking.");
        }
 
        // Fetch insurance price for user
        double insurancePrice = travelInsuranceClient.getInsurancePriceByUserId(booking.getUserId());
        double packagePrice = pkg.getPrice();
        double discountAmount = 0.0;
 
     // Coupon logic via OfferDTO
        if (couponCodeApplied != null && pkg.getOffer() != null) {
            OfferDTO offer = pkg.getOffer();
         
            if (couponCodeApplied.equalsIgnoreCase(offer.getCouponCode()) && offer.isActive()) {
                discountAmount = (packagePrice * offer.getDiscountPercentage()) / 100.0;
                System.out.println("Coupon applied. Discount amount: " + discountAmount);
            }
        }
        
        double expectedTotal = packagePrice + insurancePrice - discountAmount;
 
        if (payment.getAmount() != expectedTotal) {
            throw new IllegalArgumentException("Payment amount mismatch. Expected: " + expectedTotal);
        }
 
        // Validate Card Details
        if (!payment.getPaymentMethod().equalsIgnoreCase("Credit Card") &&
            !payment.getPaymentMethod().equalsIgnoreCase("Debit Card")) {
            throw new IllegalArgumentException("Only Credit Card or Debit Card accepted.");
        }
 
        if (payment.getCardNumber() == null || !payment.getCardNumber().matches("\\d{16}")) {
            throw new IllegalArgumentException("Invalid card number.");
        }
 
        if (payment.getCvv() == null || !payment.getCvv().matches("\\d{3}")) {
            throw new IllegalArgumentException("Invalid CVV.");
        }
 
        if (payment.getAtmPin() == null || !payment.getAtmPin().matches("\\d{4}")) {
            throw new IllegalArgumentException("Invalid ATM PIN.");
        }
 
        if (payment.getExpiryDate() == null || !payment.getExpiryDate().matches("\\d{2}/\\d{2}")) {
            throw new IllegalArgumentException("Expiry date format invalid.");
        }
 
        String[] parts = payment.getExpiryDate().split("/");
        int expMonth = Integer.parseInt(parts[0]);
        int expYear = 2000 + Integer.parseInt(parts[1]);
 
        int currentMonth = LocalDate.now().getMonthValue();
        int currentYear = LocalDate.now().getYear();
 
        if (expMonth < 1 || expMonth > 12 || expYear < currentYear ||
           (expYear == currentYear && expMonth < currentMonth)) {
            throw new IllegalArgumentException("Card has expired.");
        }
 
        // Save payment
        payment.setStatus("PAID");
        Payment savedPayment = paymentRepo.save(payment);
 
        // Update booking with payment ID
        booking.setPaymentId(savedPayment.getPaymentId());
        bookingRepo.save(booking);
 
        // Update insurance record with booking ID if insurance selected
        if (insurancePrice > 0.0) {
            travelInsuranceClient.updateInsuranceBookingId(booking.getUserId(), booking.getBookingId());
        }
 
        // Send Notifications
        notificationService.notifyCustomer(booking, savedPayment);
        notificationService.notifyTravelAgent(booking, savedPayment);
 
        return savedPayment;
    }
    
    public double calculateExpectedTotal(Long bookingId, String couponCodeApplied) {
        Booking booking = bookingRepo.findById(bookingId).orElse(null);
        if (booking == null) throw new IllegalArgumentException("Booking not found");
     
        TravelPackageDTO pkg = travelPackageClient.getPackageById(booking.getPackageId());
        if (pkg == null) throw new IllegalArgumentException("Package not found");
     
        double packagePrice = pkg.getPrice();
        double insurancePrice = travelInsuranceClient.getInsurancePriceByUserId(booking.getUserId());
        double discountAmount = 0.0;
     
        if (couponCodeApplied != null && pkg.getOffer() != null) {
            OfferDTO offer = pkg.getOffer();
            if (couponCodeApplied.equalsIgnoreCase(offer.getCouponCode()) && offer.isActive()) {
                discountAmount = (packagePrice * offer.getDiscountPercentage()) / 100.0;
            }
        }
     
        return packagePrice + insurancePrice - discountAmount;
    }
    
    public List<Payment> getAllPayments() {
        return paymentRepo.findAll();
    }
 
    public Payment getPaymentById(Long id) {
        return paymentRepo.findById(id).orElse(null);
    }
}
 

?//////////////
package com.example.travelinsuranceservice.controller;
 
import com.example.travelinsuranceservice.dto.*;
import com.example.travelinsuranceservice.model.CoverageType;
import com.example.travelinsuranceservice.model.Insurance;
import com.example.travelinsuranceservice.repository.InsuranceRepository;
import com.example.travelinsuranceservice.service.InsuranceService;
import jakarta.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;
 
import java.util.*;
import java.util.stream.Collectors;
 
/**
 * Controller exposing REST endpoints for insurance operations.
 */
@RestController
@RequestMapping("/api/insurance")
public class InsuranceController {
 
    private static final Logger logger = LoggerFactory.getLogger(InsuranceController.class);
 
    @Autowired
    private InsuranceService service;
    
    @Autowired
    private InsuranceRepository repo;
 
    /**
     * POST /api/insurance
     * Creates new insurance with fixed status "ISSUED".
     */
    @PostMapping
    public ResponseEntity<Insurance> createInsurance(@Valid @RequestBody InsuranceRequestDTO dto) {
        logger.info("POST /api/insurance - creating insurance");
        Insurance insurance = service.createInsurance(dto);
        return new ResponseEntity<>(insurance, HttpStatus.CREATED);
    }
 
 
    /**
     * GET /api/insurance/user/{userId}
     * Fetches insurance policies for a given user.
     */
    @GetMapping("/user/{userId}")
    public ResponseEntity<List<Insurance>> getByUser(@PathVariable Long userId) {
        logger.info("GET /api/insurance/user/{} - Fetching insurance list", userId);
        return ResponseEntity.ok(service.getUserInsurance(userId));
    }
    
   
 
    /**
     * GET /api/insurance/coverage-plans
     * Returns available coverage options (name, price, details, claim).
     */
    @GetMapping("/coverage-plans")
    public ResponseEntity<List<CoveragePlanDTO>> getCoveragePlans() {
        logger.info("GET /api/insurance/coverage-plans - Fetching all coverage plans");
 
        List<CoveragePlanDTO> plans = Arrays.stream(CoverageType.values())
                .map(type -> new CoveragePlanDTO(
                        type.name(),
                        type.getCoverageDetails(),
                        type.getPrice(),
                        type.getClaimableAmount()))
                .collect(Collectors.toList());
 
        return ResponseEntity.ok(plans);
    }
    
    @PutMapping("/{insuranceId}/booking/{bookingId}")
    public ResponseEntity<String> updateInsuranceBookingId(
            @PathVariable Integer insuranceId, @PathVariable Long bookingId) {
        
        Insurance insurance = repo.findById(insuranceId).orElse(null);
        
        if (insurance == null) {
            return ResponseEntity.badRequest().body("Insurance not found.");
        }
        
        insurance.setBookingId(bookingId);
        insurance.setIssuanceStatus("ACTIVE");
        repo.save(insurance);
        
        return ResponseEntity.ok("Insurance linked to booking successfully.");
    }
    
    /**
    * GET /api/insurance/price/{userId}
    * Fetch insurance price selected by userId
    */
    @GetMapping("/price/{userId}")
    public ResponseEntity<Double> getInsurancePriceByUserId(@PathVariable Long userId) {
    logger.info("GET /api/insurance/price/{} - Fetching insurance price", userId);
     
        double price = service.getInsurancePriceByUserId(userId);
     
        if (price <= 0) {
            logger.warn("No insurance found for userId: {}", userId);
            return ResponseEntity.notFound().build();
        }
     
    logger.info("Insurance price for userId {} is {}", userId, price);
        return ResponseEntity.ok(price);
    }
}

 package com.example.travelinsuranceservice.service;
 
import com.example.travelinsuranceservice.client.BookingClient;
import com.example.travelinsuranceservice.client.UserClient;
import com.example.travelinsuranceservice.dto.*;
import com.example.travelinsuranceservice.exception.*;
import com.example.travelinsuranceservice.model.CoverageType;
import com.example.travelinsuranceservice.model.Insurance;
import com.example.travelinsuranceservice.repository.InsuranceRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
 
import java.util.List;
 
/**
 * Service class handling business logic for Insurance module.
 */
@Service
public class InsuranceService {
 
    private static final Logger logger = LoggerFactory.getLogger(InsuranceService.class);
 
    @Autowired
    private InsuranceRepository repo;
 
    @Autowired
    private UserClient userClient;
 
    @Autowired
    private BookingClient bookingClient;
 
    /**
     * Creates new insurance with default status "PENDING".
     * Called when user selects insurance during booking.
     */
    public Insurance createInsurance(InsuranceRequestDTO dto) {
        logger.info("Creating insurance for userId: {}", dto.getUserId());
 
        if (userClient.getUserById(dto.getUserId()) == null) {
            logger.error("Invalid user ID: {}", dto.getUserId());
            throw new InvalidInputException("Invalid user ID: " + dto.getUserId());
        }
 
        Insurance insurance = new Insurance();
        insurance.setUserId(dto.getUserId());
        insurance.setCoverageType(CoverageType.valueOf(dto.getCoverageType().toUpperCase())); // ✅ This will now work
        
        // issuanceStatus = "PENDING" is default in entity
 
        Insurance saved = repo.save(insurance);
        logger.info("Insurance created with ID: {}", saved.getInsuranceId());
        return saved;
    }
 
    /**
     * Returns all insurance records for the given userId.
     */
    public List<Insurance> getUserInsurance(Long userId) {
        logger.info("Fetching insurance list for userId: {}", userId);
        return repo.findByUserId(userId);
    }
 
    /**
     * Returns the price of the first valid insurance selected by the user.
     * Used by Booking module to calculate total cost.
     */
    public double getInsurancePriceByUserId(Long userId) {
        logger.info("Fetching insurance price for userId: {}", userId);
 
        List<Insurance> insurances = repo.findByUserId(userId);
        if (insurances.isEmpty()) {
            logger.warn("No insurance found for userId {}", userId);
            return 0.0;
        }
 
        Insurance insurance = insurances.get(0);
 
        if ("CANCELLED".equalsIgnoreCase(insurance.getIssuanceStatus())) {
            logger.info("Insurance is cancelled for userId {}", userId);
            return 0.0;
        }
 
        logger.info("Returning insurance price {} for insuranceId {}", insurance.getPrice(), insurance.getInsuranceId());
        return insurance.getPrice();
    }
 
    /**
     * Called by Booking module after booking/payment is successful.
     * Updates bookingId and sets issuanceStatus = "ISSUED".
     */
    public String updateBookingIdInInsurance(Integer insuranceId, Long bookingId) {
        logger.info("Updating bookingId for insuranceId: {}", insuranceId);
 
        Insurance insurance = repo.findById(insuranceId)
                .orElseThrow(() -> new ResourceNotFoundException("Insurance not found: " + insuranceId));
 
        BookingDTO booking = bookingClient.getBookingById(bookingId);
        if (booking == null) {
            logger.error("Invalid bookingId: {}", bookingId);
            throw new InvalidInputException("Invalid booking ID: " + bookingId);
        }
 
        insurance.setBookingId(bookingId);
        insurance.setIssuanceStatus("ISSUED");
 
        repo.save(insurance);
        logger.info("Insurance {} updated: bookingId linked and status marked ISSUED", insuranceId);
        return "✅ Insurance successfully linked with booking and marked ISSUED.";
    }
}

 
package com.booking.service;
 
import com.booking.client.TravelPackageClient;
import com.booking.client.TravelInsuranceClient;
import com.booking.dto.OfferDTO;
import com.booking.dto.TravelPackageDTO;
import com.booking.entity.Booking;
import com.booking.entity.Payment;
import com.booking.repository.BookingRepository;
import com.booking.repository.PaymentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
 
import java.time.LocalDate;
import java.util.List;
 
@Service
public class PaymentService {
 
    @Autowired
    private PaymentRepository paymentRepo;
 
    @Autowired
    private BookingRepository bookingRepo;
 
    @Autowired
    private NotificationService notificationService;
 
    @Autowired
    private TravelPackageClient travelPackageClient;
 
    @Autowired
    private TravelInsuranceClient travelInsuranceClient;
 
    public Payment processPayment(Payment payment, String couponCodeApplied) {
        
        Long bookingId = payment.getBookingId();
        Booking booking = bookingRepo.findById(bookingId).orElse(null);
        if (booking == null) {
            throw new IllegalArgumentException("Booking with ID " + bookingId + " not found.");
        }
 
        // Fetch package details
        TravelPackageDTO pkg = travelPackageClient.getPackageById(booking.getPackageId());
        if (pkg == null) {
            throw new IllegalArgumentException("Invalid package ID associated with booking.");
        }
 
        // Fetch insurance price for user
        double insurancePrice = travelInsuranceClient.getInsurancePriceByUserId(booking.getUserId());
        double packagePrice = pkg.getPrice();
        double discountAmount = 0.0;
 
     // Coupon logic via OfferDTO
        if (couponCodeApplied != null && pkg.getOffer() != null) {
            OfferDTO offer = pkg.getOffer();
         
            if (couponCodeApplied.equalsIgnoreCase(offer.getCouponCode()) && offer.isActive()) {
                discountAmount = (packagePrice * offer.getDiscountPercentage()) / 100.0;
                System.out.println("Coupon applied. Discount amount: " + discountAmount);
            }
        }
        
        double expectedTotal = packagePrice + insurancePrice - discountAmount;
 
        if (payment.getAmount() != expectedTotal) {
            throw new IllegalArgumentException("Payment amount mismatch. Expected: " + expectedTotal);
        }
 
        // Validate Card Details
        if (!payment.getPaymentMethod().equalsIgnoreCase("Credit Card") &&
            !payment.getPaymentMethod().equalsIgnoreCase("Debit Card")) {
            throw new IllegalArgumentException("Only Credit Card or Debit Card accepted.");
        }
 
        if (payment.getCardNumber() == null || !payment.getCardNumber().matches("\\d{16}")) {
            throw new IllegalArgumentException("Invalid card number.");
        }
 
        if (payment.getCvv() == null || !payment.getCvv().matches("\\d{3}")) {
            throw new IllegalArgumentException("Invalid CVV.");
        }
 
        if (payment.getAtmPin() == null || !payment.getAtmPin().matches("\\d{4}")) {
            throw new IllegalArgumentException("Invalid ATM PIN.");
        }
 
        if (payment.getExpiryDate() == null || !payment.getExpiryDate().matches("\\d{2}/\\d{2}")) {
            throw new IllegalArgumentException("Expiry date format invalid.");
        }
 
        String[] parts = payment.getExpiryDate().split("/");
        int expMonth = Integer.parseInt(parts[0]);
        int expYear = 2000 + Integer.parseInt(parts[1]);
 
        int currentMonth = LocalDate.now().getMonthValue();
        int currentYear = LocalDate.now().getYear();
 
        if (expMonth < 1 || expMonth > 12 || expYear < currentYear ||
           (expYear == currentYear && expMonth < currentMonth)) {
            throw new IllegalArgumentException("Card has expired.");
        }
 
        // Save payment
        payment.setStatus("PAID");
        Payment savedPayment = paymentRepo.save(payment);
 
        // Update booking with payment ID
        booking.setPaymentId(savedPayment.getPaymentId());
        bookingRepo.save(booking);
 
        // Update insurance record with booking ID if insurance selected
        if (insurancePrice > 0.0) {
            travelInsuranceClient.updateInsuranceBookingId(booking.getUserId(), booking.getBookingId());
        }
 
        // Send Notifications
        notificationService.notifyCustomer(booking, savedPayment);
        notificationService.notifyTravelAgent(booking, savedPayment);
 
        return savedPayment;
    }
    
    public double calculateExpectedTotal(Long bookingId, String couponCodeApplied) {
        Booking booking = bookingRepo.findById(bookingId).orElse(null);
        if (booking == null) throw new IllegalArgumentException("Booking not found");
     
        TravelPackageDTO pkg = travelPackageClient.getPackageById(booking.getPackageId());
        if (pkg == null) throw new IllegalArgumentException("Package not found");
     
        double packagePrice = pkg.getPrice();
        double insurancePrice = travelInsuranceClient.getInsurancePriceByUserId(booking.getUserId());
        double discountAmount = 0.0;
     
        if (couponCodeApplied != null && pkg.getOffer() != null) {
            OfferDTO offer = pkg.getOffer();
            if (couponCodeApplied.equalsIgnoreCase(offer.getCouponCode()) && offer.isActive()) {
                discountAmount = (packagePrice * offer.getDiscountPercentage()) / 100.0;
            }
        }
     
        return packagePrice + insurancePrice - discountAmount;
    }
    
    public List<Payment> getAllPayments() {
        return paymentRepo.findAll();
    }
 
    public Payment getPaymentById(Long id) {
        return paymentRepo.findById(id).orElse(null);
    }
}
 
package com.booking.controller;

import com.booking.dto.PaymentResponseDTO;
import com.booking.entity.Payment;
import com.booking.service.PaymentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.Collections;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/payments")
public class PaymentController {

    @Autowired private PaymentService paymentService;

    // Process payment with optional coupon code
    @PostMapping
    public PaymentResponseDTO process(
            @RequestBody Payment payment,
            @RequestParam(required = false) String couponCode) {
 
        Payment savedPayment = paymentService.processPayment(payment, couponCode);
 
        PaymentResponseDTO response = new PaymentResponseDTO();
        response.setPaymentId(savedPayment.getPaymentId());
        response.setUserId(savedPayment.getUserId());
        response.setBookingId(savedPayment.getBookingId());
        response.setAmount(savedPayment.getAmount());
        response.setStatus(savedPayment.getStatus());
        response.setPaymentMethod(savedPayment.getPaymentMethod());
        response.setCurrency(savedPayment.getCurrency());
 
        return response;
    }
    
 // Show total payable before actual payment
    @GetMapping("/expected-total")
    public Map<String, Double> getExpectedTotal(
            @RequestParam Long bookingId,
            @RequestParam(required = false) String couponCode) {
     
        double total = paymentService.calculateExpectedTotal(bookingId, couponCode);
        return Collections.singletonMap("totalPayable", total);
    }
    
    @GetMapping public List<Payment> getAll() { return paymentService.getAllPayments(); }
    
    @GetMapping("/{id}") public Payment getById(@PathVariable Long id) { return paymentService.getPaymentById(id); }
}




    "bookingId" : 1,
    "userId": 1,
    "paymentMethod": "Debit Card",
    "amount": 34249.05,
    "cardNumber": "1111222233334444",
    "atmPin": "0001",
    "cvv": "001",
    "expiryDate": "04/28"   
}

//////////

[
    {
        "insuranceId": 1,
        "userId": 1,
        "bookingId": null,
        "coverageType": "STANDARD",
        "coverageDetails": "Includes medical coverage, trip cancellation, lost baggage, and flight delay protection.",
        "price": 1000.0,
        "claimableAmount": 200000.0,
        "issuanceStatus": "PENDING",
        "createdAt": "2025-06-25T00:19:46.295305"
    }
]

//////////////
package com.booking.entity;

import java.time.LocalDate;
import jakarta.persistence.*;
 
@Entity
public class Booking {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long bookingId;
    private Long userId;
    private Long packageId;


    @Column(name= "trip_start_date")
    private LocalDate tripStartDate;
    @Column(name= "trip_end_date")
    private LocalDate tripEndDate;


    private String status;
    private Long paymentId;
 
    // Getters and Setters
    public Long getBookingId() {
        return bookingId;
    }
 
    public void setBookingId(Long bookingId) {
        this.bookingId = bookingId;
    }
 
    public Long getUserId() {
        return userId;
    }
 
    public void setUserId(Long userId) {
        this.userId = userId;
    }
 
    public Long getPackageId() {
        return packageId;
    }
 
    public void setPackageId(Long packageId) {
        this.packageId = packageId;
    }
	public LocalDate getTripStartDate() {
		return tripStartDate;
	}
 
	public void setTripStartDate(LocalDate tripStartDate) {
		this.tripStartDate = tripStartDate;
	}
 
	public LocalDate getTripEndDate() {
		return tripEndDate;
	}
 
	public void setTripEndDate(LocalDate tripEndDate) {
		this.tripEndDate = tripEndDate;
	}

    public String getStatus() {
        return status;
    }
 
    public void setStatus(String status) {
        this.status = status;
    }
 
	public Long getPaymentId() {
		return paymentId;
	}
 
	public void setPaymentId(Long paymentId) {
		this.paymentId = paymentId;
	}
 
}

package com.booking.service;

import com.booking.client.TravelPackageClient;
import com.booking.client.UserClient;
import com.booking.dto.BookingDTO;
import com.booking.dto.TravelPackageDTO;
import com.booking.dto.UserDTO;
import com.booking.entity.Booking;
import com.booking.repository.BookingRepository;
//import com.booking.response.ApiResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import java.time.LocalDate;
import java.util.List;
import java.util.logging.Logger;

@Service
public class BookingService {
    @Autowired
    private BookingRepository bookingRepo;
    @Autowired
    private TravelPackageClient travelPackageClient;
    @Autowired
    private UserClient userClient;
    private static final Logger logger = Logger.getLogger(BookingService.class.getName());
    public BookingDTO createBooking(Booking bookingRequest) {
        Long userId = bookingRequest.getUserId();
        Long packageId = bookingRequest.getPackageId();
logger.info("Creating booking for userId: " + userId + " and packageId: " + packageId);
        // Validate User
        UserDTO user = userClient.getCustomerById(userId);
        if (user == null || !"CUSTOMER".equalsIgnoreCase(user.getRole())) {
            throw new RuntimeException("User is not a valid CUSTOMER.");
        }
        // Validate Package
        TravelPackageDTO travelPackage = travelPackageClient.getPackageById(packageId);
        if (travelPackage == null) {
            throw new IllegalArgumentException("Invalid travel package ID.");
        }
        // Create and save booking
        Booking booking = new Booking();
        booking.setUserId(userId);
        booking.setPackageId(packageId);
        booking.setTripStartDate(travelPackage.getTripStartDate());
        booking.setTripEndDate(travelPackage.getTripEndDate());
        booking.setStatus("CONFIRMED");
        Booking savedBooking = bookingRepo.save(booking);
        // Build response DTO
        BookingDTO dto = new BookingDTO();
        dto.setBookingId(savedBooking.getBookingId());
        dto.setUserId(userId);
        dto.setPackageId(packageId);
        dto.setTripStartDate(savedBooking.getTripStartDate());
        dto.setTripEndDate(savedBooking.getTripEndDate());
        dto.setStatus(savedBooking.getStatus());
        dto.setPaymentId(savedBooking.getPaymentId());
logger.info("Booking created successfully with bookingId: " + savedBooking.getBookingId());
        return dto;
    }
    public List<Booking> getAllBookings() {
        return bookingRepo.findAll();
    }
    
    public Booking getBookingById(Long id) {
        return bookingRepo.findById(id).orElse(null);
    }
    
    public Booking getInternalBookingById(Long id) {
        return bookingRepo.findById(id).orElse(null);
    }
    
    public void deleteBooking(Long id) {
        bookingRepo.deleteById(id);
    }
    
    public ResponseEntity<String> cancelBooking(Long bookingId) {
        Booking booking = bookingRepo.findById(bookingId).orElse(null);
        if (booking == null) {
            return ResponseEntity.badRequest().body("Booking not found.");
        }
        LocalDate today = LocalDate.now();
        if (booking.getTripStartDate().minusDays(7).isBefore(today)) {
            return ResponseEntity.badRequest().body("Cancellation not allowed. Must cancel at least 7 days before departure.");
        }
        booking.setStatus("CANCELLED");
        bookingRepo.save(booking);
        return ResponseEntity.ok("Booking cancelled successfully.");
    }

    // User module to return Bookings by UserId
    public List<Booking> getBookingsByUserId(Long userId) {
    	return bookingRepo.findByUserId(userId);
    }

    // Rating and reviews module to validate booking
    public boolean hasUserCompletedPackage(Long userId, String packageId) {
        List<Booking> bookings = bookingRepo.findByUserId(userId);
        LocalDate today = LocalDate.now();
        return bookings.stream()
            .anyMatch(b ->
                String.valueOf(b.getPackageId()).equals(packageId) &&
                "CONFIRMED".equalsIgnoreCase(b.getStatus()) &&
                !b.getTripEndDate().isAfter(today) // includes today
            );
    }

}
package com.booking.service;
 
import com.booking.client.TravelPackageClient;
import com.booking.client.TravelInsuranceClient;
import com.booking.dto.OfferDTO;
import com.booking.dto.TravelPackageDTO;
import com.booking.entity.Booking;
import com.booking.entity.Payment;
import com.booking.repository.BookingRepository;
import com.booking.repository.PaymentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
 
import java.time.LocalDate;
import java.util.List;
 
@Service
public class PaymentService {
 
    @Autowired
    private PaymentRepository paymentRepo;
 
    @Autowired
    private BookingRepository bookingRepo;
 
    @Autowired
    private NotificationService notificationService;
 
    @Autowired
    private TravelPackageClient travelPackageClient;
 
    @Autowired
    private TravelInsuranceClient travelInsuranceClient;
 
    public Payment processPayment(Payment payment, String couponCodeApplied) {
        
        Long bookingId = payment.getBookingId();
        Booking booking = bookingRepo.findById(bookingId).orElse(null);
        if (booking == null) {
            throw new IllegalArgumentException("Booking with ID " + bookingId + " not found.");
        }
 
        // Fetch package details
        TravelPackageDTO pkg = travelPackageClient.getPackageById(booking.getPackageId());
        if (pkg == null) {
            throw new IllegalArgumentException("Invalid package ID associated with booking.");
        }
 
        // Fetch insurance price for user
        double insurancePrice = travelInsuranceClient.getInsurancePriceByUserId(booking.getUserId());
        double packagePrice = pkg.getPrice();
        double discountAmount = 0.0;
 
     // Coupon logic via OfferDTO
        if (couponCodeApplied != null && pkg.getOffer() != null) {
            OfferDTO offer = pkg.getOffer();
         
            if (couponCodeApplied.equalsIgnoreCase(offer.getCouponCode()) && offer.isActive()) {
                discountAmount = (packagePrice * offer.getDiscountPercentage()) / 100.0;
                System.out.println("Coupon applied. Discount amount: " + discountAmount);
            }
        }
        
        double expectedTotal = packagePrice + insurancePrice - discountAmount;
 
        if (payment.getAmount() != expectedTotal) {
            throw new IllegalArgumentException("Payment amount mismatch. Expected: " + expectedTotal);
        }
 
        // Validate Card Details
        if (!payment.getPaymentMethod().equalsIgnoreCase("Credit Card") &&
            !payment.getPaymentMethod().equalsIgnoreCase("Debit Card")) {
            throw new IllegalArgumentException("Only Credit Card or Debit Card accepted.");
        }
 
        if (payment.getCardNumber() == null || !payment.getCardNumber().matches("\\d{16}")) {
            throw new IllegalArgumentException("Invalid card number.");
        }
 
        if (payment.getCvv() == null || !payment.getCvv().matches("\\d{3}")) {
            throw new IllegalArgumentException("Invalid CVV.");
        }
 
        if (payment.getAtmPin() == null || !payment.getAtmPin().matches("\\d{4}")) {
            throw new IllegalArgumentException("Invalid ATM PIN.");
        }
 
        if (payment.getExpiryDate() == null || !payment.getExpiryDate().matches("\\d{2}/\\d{2}")) {
            throw new IllegalArgumentException("Expiry date format invalid.");
        }
 
        String[] parts = payment.getExpiryDate().split("/");
        int expMonth = Integer.parseInt(parts[0]);
        int expYear = 2000 + Integer.parseInt(parts[1]);
 
        int currentMonth = LocalDate.now().getMonthValue();
        int currentYear = LocalDate.now().getYear();
 
        if (expMonth < 1 || expMonth > 12 || expYear < currentYear ||
           (expYear == currentYear && expMonth < currentMonth)) {
            throw new IllegalArgumentException("Card has expired.");
        }
 
        // Save payment
        payment.setStatus("PAID");
        Payment savedPayment = paymentRepo.save(payment);
 
        // Update booking with payment ID
        booking.setPaymentId(savedPayment.getPaymentId());
        bookingRepo.save(booking);
 
        // Update insurance record with booking ID if insurance selected
        if (insurancePrice > 0.0) {
            travelInsuranceClient.updateInsuranceBookingId(booking.getUserId(), booking.getBookingId());
        }
 
        // Send Notifications
        notificationService.notifyCustomer(booking, savedPayment);
        notificationService.notifyTravelAgent(booking, savedPayment);
 
        return savedPayment;
    }
    
    public double calculateExpectedTotal(Long bookingId, String couponCodeApplied) {
        Booking booking = bookingRepo.findById(bookingId).orElse(null);
        if (booking == null) throw new IllegalArgumentException("Booking not found");
     
        TravelPackageDTO pkg = travelPackageClient.getPackageById(booking.getPackageId());
        if (pkg == null) throw new IllegalArgumentException("Package not found");
     
        double packagePrice = pkg.getPrice();
        double insurancePrice = travelInsuranceClient.getInsurancePriceByUserId(booking.getUserId());
        double discountAmount = 0.0;
     
        if (couponCodeApplied != null && pkg.getOffer() != null) {
            OfferDTO offer = pkg.getOffer();
            if (couponCodeApplied.equalsIgnoreCase(offer.getCouponCode()) && offer.isActive()) {
                discountAmount = (packagePrice * offer.getDiscountPercentage()) / 100.0;
            }
        }
     
        return packagePrice + insurancePrice - discountAmount;
    }
    
    public List<Payment> getAllPayments() {
        return paymentRepo.findAll();
    }
 
    public Payment getPaymentById(Long id) {
        return paymentRepo.findById(id).orElse(null);
    }
}
 package com.booking.client;

import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;

import java.util.List;
 
@FeignClient(name = "TravelInsuranceService")
public interface TravelInsuranceClient {
 
	@GetMapping("/api/insurance/price/{userId}")
    double getInsurancePriceByUserId(@PathVariable("userId") Long userId);
 
    @PutMapping("/api/insurance/{insuranceId}/booking/{bookingId}")
    String updateInsuranceBookingId(@PathVariable("insuranceId") Long insuranceId, @PathVariable("bookingId") Long bookingId);
}
