package-detailsComponent.ts
import { Component, OnInit } from '@angular/core';
 import { ActivatedRoute, Router } from '@angular/router';
 import { TravelPackageService } from '../services/package.service';
import { TravelPackage } from '../models/travel-package';
 import { CommonModule } from '@angular/common';
 import { ReviewService } from '../services/review.service';
import { InsuranceService} from '../services/insurance.service';

@Component({ selector: 'app-package-details',
  standalone: true,
   imports: [CommonModule],
    templateUrl: './package-details.component.html',
    styleUrl: './package-details.component.css' })
  export class PackageDetailsComponent implements OnInit {
     packageId!: number;
    // travelPackage!: TravelPackage;
   packageDetails:any;
constructor( private route: ActivatedRoute,
   private packageService: TravelPackageService,
   private reviewService: ReviewService,
   private insuranceService:InsuranceService,
   private router: Router ) {}
 
   ngOnInit(): void {
    // Convert packageId from route snapshot (string) to number
    const idParam = this.route.snapshot.paramMap.get('packageId');
    if (idParam) {
        this.packageId = Number(idParam);
        console.log('Opened Package ID:', this.packageId);
 
        this.packageService.getPackageById(this.packageId).subscribe({
            next: (response: any) => {
                console.log('Fetched package details:', response);
                // Corrected assignment: handle both direct object and 'data' wrapper
                this.packageDetails = response.data || response;
            },
            error: (err) => {
                console.error('Failed to fetch package details', err);
                this.packageDetails = undefined; // Clear details on error
            }
        });
    } else {
        console.error('Package ID not found in route parameters.');
        this.packageDetails = undefined;
        // Optionally, navigate away or show an error message
        this.router.navigate(['/customer-dashboard']);
    }
  }
 
    // Ensure these methods pass a number for packageId
  goToReview(): void {
    if (this.packageId) {
      this.router.navigate(['/review-dashboard', this.packageId]);
    }
  }
  goToBooking(): void {
    if (this.packageId) {
      this.router.navigate(['/booking', this.packageId]);
    }
  }
  addInsurance(): void {
    this.router.navigate(['/insurance-selection']);
  }
   
  }
 


/// package-detailsComponent.html
<div *ngIf="packageDetails" class="package-container">
  <div class="top-section">
    <div class="card image-card">
      <h2>{{ packageDetails.title }}</h2>
      <img
        class="package-image"
        [src]="packageDetails.imageUrl ? 'assets/images/' + packageDetails.imageUrl : 'assets/images/default.jpg'"
        alt="Package Image"
      />
    </div>
 
    <div class="card details-card">
      <h2>{{ packageDetails.title }}</h2>
      <p class="desc">{{ packageDetails.description }}</p>
 
      <div class="info-grid">
        <div><strong>Destination:</strong> {{ packageDetails.destination }}</div>
        <div><strong>Country:</strong> {{ packageDetails.country }}</div>
        <div><strong>Trip Type:</strong> {{ packageDetails.tripType }}</div>
        <div><strong>Duration:</strong> {{ packageDetails.duration }} days</div>
        <div><strong>Price:</strong> ‚Çπ{{ packageDetails.price }}</div>
        <div><strong>Max Capacity:</strong> {{ packageDetails.maxCapacity }}</div>
        <div><strong>Start Date:</strong> {{ packageDetails.tripStartDate | date: 'MMM d, y' }}</div>
        <div><strong>End Date:</strong> {{ packageDetails.tripEndDate | date: 'MMM d, y' }}</div>
      </div>
 
      <div class="action-buttons">
        <button class="btn book" (click)="goToBooking()">Book Now</button>
        <button class="btn review" (click)="goToReview()">Give Review</button>
        <button class="btn insurance" (click)="addInsurance()">Insurance</button>
      </div>
    </div>
  </div>
 
  <div class="section-grid">
    <div class="card" *ngIf="packageDetails.highlights?.length">
      <h3>Highlights</h3>
      <ul>
        <li *ngFor="let h of packageDetails.highlights">üåü {{ h }}</li>
      </ul>
    </div>
 
    <div class="card" *ngIf="packageDetails.flights?.length">
      <h3>Flights</h3>
      <ul>
        <li *ngFor="let f of packageDetails.flights">
          ‚úàÔ∏è {{ f.airline }} ‚Äî {{ f.fromCity }} ‚Üí {{ f.toCity }} ({{ f.departureTime }} - {{ f.arrivalTime }})
        </li>
      </ul>
    </div>
 
    <div class="card" *ngIf="packageDetails.hotels?.length">
      <h3>Hotels</h3>
      <ul>
        <li *ngFor="let h of packageDetails.hotels">
          üè® {{ h.name }}, {{ h.city }} ‚Äî {{ h.rating }}‚òÖ ({{ h.nights }} nights)
        </li>
      </ul>
    </div>
 
    <div class="card" *ngIf="packageDetails.sightseeing?.length">
      <h3>Sightseeing</h3>
      <ul>
        <li *ngFor="let s of packageDetails.sightseeing">
          üìç {{ s.location }} - {{ s.description }}
        </li>
      </ul>
    </div>
 
    <div class="card" *ngIf="packageDetails.itinerary?.length">
      <h3>Itinerary</h3>
      <ul>
        <li *ngFor="let i of packageDetails.itinerary">
          üóìÔ∏è Day {{ i.dayNumber }}: {{ i.activityTitle }} - {{ i.activityDescription }}
        </li>
      </ul>
    </div>
 
    <div class="card" *ngIf="packageDetails.offer">
      <h3>Special Offer</h3>
      <p>
        üéÅ <strong>{{ packageDetails.offer.couponCode }}</strong> ‚Äî
        {{ packageDetails.offer.description }} ({{ packageDetails.offer.discountPercentage }}% OFF)
      </p>
    </div>
  </div>
</div>
 
///////////////////
// CORRECTED: Changed packageId type to number
  getPackageById(packageId: number): Observable<{ data :TravelPackage}> { // Type as TravelPackage
    return this.http.get<any>(`${this.baseUrl}/${packageId}`).pipe(
      map(response => response.data || response) // Robustly get the package data
    );
  }

//////////////
‚ñ≤ [WARNING] NG8103: The `*ngIf` directive was used in the template, but neither the `NgIf` directive nor the `CommonModule` was imported. Use Angular's built-in control flow @if or make sure that either the `NgIf` directive or the `CommonModule` is included in the `@Component.imports` array of this component. [plugin angular-compiler]

    src/app/payment/payment.component.html:43:10:
      43 ‚îÇ     <div *ngIf="showTotal" class="mb-3 bg-green-100 p-3 rounded">
         ‚ïµ           ~~~~

  Error occurs in the template of component PaymentComponent.

    src/app/payment/payment.component.ts:8:15:
      8 ‚îÇ   templateUrl: './payment.component.html'
        ‚ïµ                ~~~~~~~~~~~~~~~~~~~~~~~~~~


X [ERROR] NG8002: Can't bind to 'formGroup' since it isn't a known property of 'form'. [plugin angular-compiler]

    src/app/booking/booking.component.html:4:8:
      4 ‚îÇ   <form [formGroup]="bookingForm" (ngSubmit)="bookPackage()">
        ‚ïµ         ~~~~~~~~~~~~~~~~~~~~~~~~~

  Error occurs in the template of component BookingComponent.

    src/app/booking/booking.component.ts:9:15:
      9 ‚îÇ   templateUrl: './booking.component.html'
        ‚ïµ                ~~~~~~~~~~~~~~~~~~~~~~~~~~


X [ERROR] NG8002: Can't bind to 'formGroup' since it isn't a known property of 'form'. [plugin angular-compiler]

    src/app/payment/payment.component.html:4:8:
      4 ‚îÇ   <form [formGroup]="paymentForm" (ngSubmit)="submitPayment()">
        ‚ïµ         ~~~~~~~~~~~~~~~~~~~~~~~~~

  Error occurs in the template of component PaymentComponent.

    src/app/payment/payment.component.ts:8:15:
      8 ‚îÇ   templateUrl: './payment.component.html'
        ‚ïµ                ~~~~~~~~~~~~~~~~~~~~~~~~~~


Watch mode enabled. Watching for file changes...

.///////////////
import { Component } from '@angular/core';
 
@Component({
  selector: 'app-payment-success',
  standalone:true,
  templateUrl: './payment-success.component.html',
  styleUrls:['./payment-success.component.css'],

  template: `
    <div class="card p-4 text-center">
      <h2>Payment Successful üéâ</h2>
      <p>Your booking has been confirmed. A confirmation email has been sent.</p>
      <a class="btn btn-primary mt-3" routerLink="/">Go to Dashboard</a>
    </div>
  `,
})
export class PaymentSuccessComponent {}


////////////////
 @PostMapping
    public ResponseEntity<BookingDTO> createBooking(@RequestBody Booking booking) {
        try {
            BookingDTO bookingDTO = service.createBooking(booking);
            return new ResponseEntity<>(bookingDTO, HttpStatus.CREATED);
        } catch (RuntimeException ex) {
            logger.severe("Error creating booking: " + ex.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);
        }
    }


///////////////////////
bookPackage() {
  const payload = {
    userId: this.userId,
    packageId: this.packageId,
    insuranceId: this.bookingForm.value.insuranceId || null,
    tripStartDate: this.tripStartDate,
    tripEndDate: this.tripEndDate
  };

  console.log('Booking payload:', payload); // ‚úÖ Inspect in browser console

  this.bookingService.createBooking(payload).subscribe({
    next: (res) => {
      alert('Booking Created!');
      this.router.navigate(['/payment'], {
        state: { bookingId: res.bookingId, userId: res.userId }
      });
    },
    error: (err) => {
      console.error('Booking failed:', err);
      const errorMsg = err?.error?.message || err.statusText || 'Unknown error';
      alert('Booking failed: ' + errorMsg);
    }
  });
}

////////////
A cross-origin resource sharing (CORS) request was blocked because of invalid or missing response headers of the request or the associated preflight request.

To fix this issue, ensure the response to the CORS request and/or the associated preflight request are not missing headers and use valid header values.

Note that if an opaque response is sufficient, the request's mode can be set to no-cors to fetch the resource with CORS disabled; that way CORS headers are not required but the response content is inaccessible (opaque).

1 request
Request	Status	Preflight Request (if problematic)	Header	Problem	Invalid Value (if available)

 bookings	blocked		Access-Control-Allow-Origin	Multiple Values	http://localhost:4200, http://localhost:4200
Learn more: Cross-Origin Resource Sharing (CORS)

/////////////////
localStorage.setItem(
  'user',
  JSON.stringify({
    userId: id,
    role: role,
    token: token
  })
);
